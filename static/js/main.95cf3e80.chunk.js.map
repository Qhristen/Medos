{"version":3,"sources":["Components/Todo.jsx","Components/TodoForm.jsx","Components/ViewTodoForm.jsx","Components/index.jsx","Components/MedosNav.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completed","deleteTodo","handleClick","useState","showA","setShowA","style","textDecoration","isCompleted","className","Toast","show","onClose","onClick","Header","icon","faCoffee","margin","tittle","Form","Check","type","onChange","Body","text","TodoForm","addTodo","title","setTitle","msg","setMsg","console","log","onSubmit","e","preventDefault","Group","Control","name","value","target","placeholder","as","rows","Button","float","variant","ViewTodoForm","handleClose","Modal","onHide","closeButton","Title","Home","modalShow","setModalShow","todos","setTodos","newTodo","splice","setShow","Container","map","key","faPlusCircle","fontSize","MedosNav","Navbar","bg","Brand","href","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAsCeA,EAjCF,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAAkB,EAC1CC,oBAAS,GADiC,mBAC7DC,EAD6D,KACtDC,EADsD,KAIpE,OACE,yBACEC,MAAO,CAAEC,eAAgBT,EAAKU,YAAc,eAAiB,QAC7DC,UAAU,QAEV,kBAACC,EAAA,EAAD,CAAOC,KAAMP,EAAOQ,QAPJ,kBAAMP,EAASJ,IAOWY,QAASX,GACjD,kBAACQ,EAAA,EAAMI,OAAP,KACE,kBAAC,IAAD,CACEC,KAAMC,IACNP,UAAU,aACVH,MAAO,CAAEW,OAAQ,SAEnB,4BAAQR,UAAU,WAAWX,EAAKoB,QAClC,+BACG,IACD,kBAACC,EAAA,EAAKC,MAAN,CACEC,KAAK,WACLC,SAAU,kBAAMtB,EAAUD,MACzB,MAGP,kBAACW,EAAA,EAAMa,KAAP,KACE,2BAAIzB,EAAK0B,U,gBCYJC,EAxCE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACNvB,mBAAS,IADH,mBACzBwB,EADyB,KAClBC,EADkB,OAGVzB,mBAAS,IAHC,mBAGzB0B,EAHyB,KAGpBC,EAHoB,KAUhC,OAFAC,QAAQC,IAAIL,EAAOE,GAGjB,6BACE,kBAACV,EAAA,EAAD,CAAMc,SARY,SAACC,GACrBA,EAAEC,iBACFT,EAAQC,EAAOE,KAOX,kBAACV,EAAA,EAAKiB,MAAN,KACE,kBAACjB,EAAA,EAAKkB,QAAN,CACEhB,KAAK,OACLiB,KAAK,SACLC,MAAOZ,EACPL,SAAU,SAACY,GAAD,OAAON,EAASM,EAAEM,OAAOD,QACnC9B,UAAU,OACVgC,YAAY,WAEd,kBAACtB,EAAA,EAAKkB,QAAN,CACEK,GAAG,WACHrB,KAAK,OACLiB,KAAK,MACLK,KAAK,IACLJ,MAAOV,EACPY,YAAY,yBACZnB,SAAU,SAACY,GAAD,OAAOJ,EAAOI,EAAEM,OAAOD,WAGrC,kBAACK,EAAA,EAAD,CAAQtC,MAAO,CAAEuC,MAAO,SAAWC,QAAQ,UAAUzB,KAAK,UAA1D,aCbO0B,EAhBM,SAAC,GAAoC,IAAlCrB,EAAiC,EAAjCA,QAASsB,EAAwB,EAAxBA,YAAarC,EAAW,EAAXA,KAC5C,OACE,oCACE,kBAACsC,EAAA,EAAD,CAAOtC,KAAMA,EAAMuC,OAAQF,GACzB,kBAACC,EAAA,EAAMnC,OAAP,CAAcqC,aAAW,GACvB,kBAACF,EAAA,EAAMG,MAAP,mBACA,kBAAC,IAAD,CAAiBrC,KAAMC,IAAUP,UAAU,gBAE7C,kBAACwC,EAAA,EAAM1B,KAAP,KACE,kBAAC,EAAD,CAAUG,QAASA,QC0Fd2B,EAzFF,WAAO,IAAD,IACiBlD,oBAAS,GAD1B,mBACVmD,EADU,KACCC,EADD,OAGSpD,mBAAS,CACjC,CACEe,OAAQ,gBACRM,KAAM,iCACNhB,aAAa,KAPA,mBAGVgD,EAHU,KAGHC,EAHG,KAiBXzD,EAAY,SAACD,GACjB,IAAM2D,EAAO,YAAOF,GACpBE,EAAQ3D,GAAOS,aAAc,EAC7BiD,EAASC,IAGLzD,EAAa,SAACF,GAClB,IAAM2D,EAAO,YAAOF,GACpBE,EAAQC,OAAO5D,EAAO,GACtB0D,EAASC,IAGLxD,EAAc,WAClBqD,GAAa,IA9BE,EAiCOpD,oBAAS,GAjChB,mBAiCVQ,EAjCU,KAiCJiD,EAjCI,OAkCWzD,mBAAS,IAlCpB,gCAmCSA,mBAAS,KAnClB,mBA4CX6C,GA5CW,UA4CG,kBAAMY,GAAQ,KAGlC,OACE,6BACE,kBAACC,EAAA,EAAD,CAAWpD,UAAU,OACnB,yBAAKA,UAAU,cAQf,kBAAC,GAAD,GACEE,KAAM2C,EACNJ,OAAQ,kBAAMK,GAAa,KAF7B,qBAGQ5C,GAHR,4BAIeqC,GAJf,yBA/CU,SAAC9B,EAAQM,GACvB,IAAMkC,EAAO,CAAI,CAAExC,SAAQM,SAAd,mBAAyBgC,IACtCC,EAASC,GACTV,OA4CI,IAOA,yBAAK1C,MAAO,CAAEuC,MAAO,SAClBW,EAAMM,KAAI,SAAChE,EAAMC,GAAP,OACT,kBAAC,EAAD,CACEgE,IAAKhE,EACLA,MAAOA,EACPD,KAAMA,EACNE,UAAWA,EACXC,WAAYA,EACZC,YAAaA,QAKnB,kBAAC,IAAD,CACEa,KAAMiD,IACNnD,QAnCW,kBAAM+C,GAAQ,IAoCzBtD,MAAO,CAAEuC,MAAO,QAASoB,SAAU,SACnCxD,UAAU,2B,QCnFLyD,EAZE,WACf,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUtB,QAAQ,QAC3B,kBAACqB,EAAA,EAAOE,MAAR,CAAcC,KAAK,SACjB,yCCcKC,MAdf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWrB,IACjC,kBAAC,IAAD,CAAOmB,KAAK,IAAIC,OAAK,EAACC,UAAWrB,QCHvBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.95cf3e80.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCoffee, faBars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { ListGroup, Card, Toast, Form } from \"react-bootstrap\";\r\n\r\nconst Todo = ({ todo, index, completed, deleteTodo, handleClick }) => {\r\n  const [showA, setShowA] = useState(true);\r\n  const toggleShowA = () => setShowA(deleteTodo);\r\n\r\n  return (\r\n    <div\r\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"none\" }}\r\n      className=\"mt-3\"\r\n    >\r\n      <Toast show={showA} onClose={toggleShowA} onClick={handleClick}>\r\n        <Toast.Header>\r\n          <FontAwesomeIcon\r\n            icon={faCoffee}\r\n            className=\"medos-icon\"\r\n            style={{ margin: \"7px\" }}\r\n          />\r\n          <strong className=\"mr-auto\">{todo.tittle}</strong>\r\n          <small>\r\n            {\" \"}\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              onChange={() => completed(index)}\r\n            />{\" \"}\r\n          </small>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n          <p>{todo.text}</p>\r\n        </Toast.Body>\r\n      </Toast>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\n\r\nconst TodoForm = ({ addTodo }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const [msg, setMsg] = useState(\"\");\r\n  const HandleSubmmit = (e) => {\r\n    e.preventDefault();\r\n    addTodo(title, msg);\r\n  };\r\n  console.log(title, msg);\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={HandleSubmmit}>\r\n        <Form.Group>\r\n          <Form.Control\r\n            type=\"text\"\r\n            name=\"tittle\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            className=\"mt-3\"\r\n            placeholder=\"Tittle\"\r\n          />\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            type=\"text\"\r\n            name=\"msg\"\r\n            rows=\"8\"\r\n            value={msg}\r\n            placeholder=\"What's on your mind!!!\"\r\n            onChange={(e) => setMsg(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Button style={{ float: \"right\" }} variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCoffee, faBars } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ViewTodoForm = ({ addTodo, handleClose, show }) => {\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Medos Post</Modal.Title>\r\n          <FontAwesomeIcon icon={faCoffee} className=\"medos-icon\" />\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <TodoForm addTodo={addTodo} />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewTodoForm;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  FormControl,\r\n  Container,\r\n  Jumbotron,\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Todo from \"./Todo\";\r\n\r\nimport ViewTodoForm from \"./ViewTodoForm\";\r\n\r\nconst Home = () => {\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  const [todos, setTodos] = useState([\r\n    {\r\n      tittle: \"My first Post\",\r\n      text: \"This is my first post in Medos\",\r\n      isCompleted: false,\r\n    },\r\n  ]);\r\n\r\n  const addTodo = (tittle, text) => {\r\n    const newTodo = [{ tittle, text }, ...todos];\r\n    setTodos(newTodo);\r\n    handleClose();\r\n  };\r\n\r\n  const completed = (index) => {\r\n    const newTodo = [...todos];\r\n    newTodo[index].isCompleted = true;\r\n    setTodos(newTodo);\r\n  };\r\n\r\n  const deleteTodo = (index) => {\r\n    const newTodo = [...todos];\r\n    newTodo.splice(index, 1);\r\n    setTodos(newTodo);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setModalShow(false);\r\n  };\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState(\"\");\r\n  const updateSearch = (e) => {\r\n    setSearch(e.target.value);\r\n    console.log(search);\r\n  };\r\n  const getSearch = (e) => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n  };\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <div>\r\n      <Container className=\"con\">\r\n        <div className=\"container\">\r\n          {/* <FontAwesomeIcon\r\n            icon={faPlusCircle}\r\n            onClick={handleShow}\r\n            className=\"font-prop mt-3 mb-3\"\r\n          /> */}\r\n        </div>\r\n\r\n        <ViewTodoForm\r\n          show={modalShow}\r\n          onHide={() => setModalShow(false)}\r\n          show={show}\r\n          handleClose={handleClose}\r\n          addTodo={addTodo}\r\n        />\r\n        <div style={{ float: \"left\" }}>\r\n          {todos.map((todo, index) => (\r\n            <Todo\r\n              key={index}\r\n              index={index}\r\n              todo={todo}\r\n              completed={completed}\r\n              deleteTodo={deleteTodo}\r\n              handleClick={handleClick}\r\n            />\r\n          ))}\r\n        </div>\r\n\r\n        <FontAwesomeIcon\r\n          icon={faPlusCircle}\r\n          onClick={handleShow}\r\n          style={{ float: \"right\", fontSize: \"400px\" }}\r\n          className=\"font-prop mt-3 mb-3\"\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Navbar, Nav, FormControl, Button, Form } from \"react-bootstrap\";\r\n\r\nconst MedosNav = () => {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"primary\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#home\">\r\n          <h2>Medos</h2>\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MedosNav;\r\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./Components/index\";\nimport NavBar from \"./Components/MedosNav\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <NavBar />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"*\" exact component={Home} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}